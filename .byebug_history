c
@issue.assigned_to_id
@issue
session[:user_id]
c
session[:user_id]
c
session[:user_id]
c
session[:user_id]
c
logged_user
find_current_user
session[:user_id]
current_user
c
self.assigned_to
nself.assigned_to
n
c
self.previous_assignee
self.created_on == self.updated_on
c
self.created_on == self.updated_on 
c
exit
User.find(7).name
User.find(7)
@issue.assigned_to_id
@issue.assigned_to
@issue.assigned_to_id_was
@issue.assigned_to_was
 @issue.previous_assignee = @issue.assigned_to_was.name
@issue.assigned_to_id_was
assigned_to_id_was
@issue.assigned_to_id
@issue.assigned_ti_id
@issue.changed?
@issue
c
@issue.changed?
@issue.assigned_to.changed?
@issue.assigned_to.changes?
@issue.assigned_to
@issue.assigned_to_was
@issue.assigned_to_was.name
@issue.previous_assignee
c
self
self.journals
self.journals.count
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).first.user.name
self.journals.includes(:user, :details).references(:user, :details).order(id: :desc).pluck(:id)
self.journals.includes(:user, :details).references(:user, :details).order(id: :desc).first
self.journals.includes(:user, :details).references(:user, :details).order(id: :desc)
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id)
self.journals.includes(:user, :details).references(:user, :details).reorder(:journalized_id, :id).first
self.journals.includes(:user, :details).references(:user, :details).reorder(:journalized_id, :id).last
self.journals.includes(:user, :details).references(:user, :details).reorder(:journalized_id, :id)
self.journals.includes(:user, :details).references(:user, :details).last
self.journals.includes(:user, :details).references(:user, :details).class
self.journals.includes(:user, :details).references(:user, :details)
self.journals.includes(:user, :details).references(:user, :details).reorder(:createded_on, :id).last
self.journals.includes(:user, :details).references(:user, :details).reorder(:updated_on, :id).last
self.journals.includes(:user, :details).references(:user, :details).reorder(:updated_on, :id)
self.journals.includes(:user, :details).references(:user, :details).reorder(:updateed_on, :id).to_a
self.journals.includes(:user, :details).references(:user, :details).reorder(:updateed_on, :id)
self.journals.includes(:user, :details).references(:user, :details).reorder(:updateed_on, :id).last
self.journals.includes(:user, :details).references(:user, :details).reorder(:updateed_on, :id).count
self.journals.includes(:user, :details).references(:user, :details).reorder(:updateed_on, :id)
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id)
self.journals.includes(:user, :details).references(:user, :details).reorder(:updated_on, :id).first.user.name
c
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).first.user.namec
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).first.user.name
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).first
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).last
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).last.user.name
self.journals.includes(:user, :details).references(:user, :details).reorder(:created_on, :id).last
                    reorder(:created_on, :id).last
                    references(:user, :details).
self.journals.includes(:user, :details).
 @journals.last
 @journals
continue
c
@issue.assigned_to_was
@issue.assigned_to
@issue
c
self.assigned_to.name
self.previous_assignee
exit
self.get_assignee
@previous_assigned_to_id
set_assigned_to_was
self.assigned_to_id
set_assigned_to_was
self.assigned_to.name
Issue::ASSIGNEE
c
Issue::ASSIGNEE
self.get_assignee
self.assigned_to_id
assigned_to_id_was
exit
detail.prop_key
field
n
detail.prop_key
detail
n
exit
strings
nstrings
n
detail.property == 'cf'
detail
exit
details
exit
string
exit
c
journal.visible_details.count
journal.visible_details.last
journal.visible_details
journal
c
self.assigned_to
self.assigned_to_was
self.assigned_to_was.name
exit
self.created_on == self.updated_on
c
self.assigned_to.name
@@assignee
c
self.assigned_to_was.name
c
self.assigned_to_was.name
self.assigned_to_was
self.changes['assigned_to_id']
self.changes.class
self.changes
self.assigned_to.name
c
@@assignee
assigned_to.name
c
self.created_on == self.updated_on
self.created_at == self.updated_at
self.created_at == updated_at.self
self
c
@user
c
params[:user][:phone]
params[:user]
@user
c
params[:user]
c
params[:user]
c
ec
"http://9e57e91e.ngrok.io/#{response.to_xml}"
http://9e57e91e.ngrok.io/response.to_xml
http://9e57e91e.ngrok.io/#{response.to_xml}
exit
self.priority.name
self.priority
self.status.name
self.status
self.subject
self.tracker.name
self.tracker
message = message+self.assigned_to.name
self.assigned_to.name
self
c
self.assigned_to
self
exit
 @issue.status.name
 @issue.priority.name
 @issue.priority
 @issue.subject
 @issue.tracker.name
 @issue.assigned_to.firstname
 @issue.tracker.name
 @issue.tracker
 @issue.tacker
 @issue.assigned_to.phone
 @issue.assigned_to
 @issue.author
 @issue
c
:admin_menu
render_menu :admin_menu
c
n
Redmine::DefaultData::Loader::no_data?
params
==================================================
exit
params
params[:send_information]
arams[:send_information]
n
c
News.latest User.current
User.current
