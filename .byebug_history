c
params[:issue]
params[:issue].merge!(stop_progress_at: Time.now)
params[:issue]
params[:issue].merge(stop_progress_at: Time.now)
params[]params[:issue].merge(stop_progress_at: Time.now)
params
c
n
value
detail.prop_key
label
n
detail.prop_key
n
field
n
detail.property
detail
c
detail
c
n
attrs.empty?
attrs
n
attrs
delete_unsafe_attributes(attrs, user)
delete_unsafe_attributesdelete_unsafe_attributes(attrs, user)
attrs
n
attrs
n
issue_attributes
n
params
n
c
safe_attribute_names
safe_attributes?
safe_attributes
attrs.empty?
attrs.empty
attrs
attrsattrs
attrs
n
attrs
n
statuses
status
n
safe_attributes
n
params[:checked] == 'false'
c
n
m
n
@issue.done_ratio_changed?
@issue.done_ratio.changed?
n
attrs
n
new_record? && @copied_from
n
statuses_allowed
self.tracker
n
project
n
(t = attrs.delete('tracker_id')) && safe_attribute?('tracker_id')
n
project_id_changed?
n
(p = attrs.delete('project_id')) && safe_attribute?('project_id')
n
attrs
n
params[:issue]
n
c
self.assigned_to.changed?
c
n
statuses
n
@issue.changed_attributes
changed_attributes
@issue.safe_attributes
n
attrs
n
attrs['custom_fields'].present?
n
attrs['custom_field_values']
nattrs['custom_field_values']
n
attrs
n
u
n
u
n
attrs.delete('status_id')
nattrs.delete('status_id')
n
s
n
statuses
n
blocked?
n
include_default
default_status
statuses
n
statuses
n
(user.id == initial_assigned_to_id || user.group_ids.include?(initial_assigned_to_id))
   885:         (user.id == initial_assigned_to_id || user.group_ids.include?(initial_assigned_to_id))
initial_assigned_to_id.present? &&
assignee_transitions_allowed
n
user.group_ids.include?(initial_assigned_to_id)
user.id == initial_assigned_to_id
initial_assigned_to_id
initial_assigned_to_id.present?
assignee_transitions_allowed
assigned_to_id
initial_assigned_to_id
n
initial_assigned_to_id
n
status_was
n
tracker_id_changed?
n
user
params[:issue]
n
@issue.safe_attribute_names
@issue.safe_attributes?
@issue.safe_attributes
n
issue_attributes
n
@issue.current_journal
n
params[:time_entry]
@time_entry
n
c
n
statuses
n
initial_assigned_to_id
initial_assigned_to_id.present?
n
assigned_to_id_changed?
n
new_record? && @copied_from
c
paramsc
n
params
c
@journals[3].visible_details.last.old_value
@journals[3].visible_details.last.prop_key
@journals[3].visible_details.last.prop_key.to_s.gsub(/\_id$/, "")
@journals[3].visible_details.last
@journals[3].visible_details.count
@journals[3].visible_details.last
@journals[3].visible_details.class
details_to_strings
@journals[3].visible_details
@journals[3].details
@journals[3]
@journals.count
@journals
c
exit
@issue.status_was
@issue.status
@issue.current_journal
@issue.current_journer
@issue
User.current
params
c
n
c
params[:time_entry]
n
c
n
@priorities 
n
IssuePriorityn
IssuePriority
n
params[:conflict_resolution]
n
params[:issue]
issue_attributes
ississue_attributes
@issue.current_journal
@issue.init_journal
n
User.current
@issue.init_journal
n
params[:time_entry]
@time_entry
n
@time_entry
@issue.project
@issue
params
n
c
flash[:notice]
n
saved
n
update_issue_from_params
n
v
c
exit
params
c
params
c
params[:checked] == 'false'
c
params[:checked] == 'false'
c
params[:checked] == 'false'
c
n
params[:checked] == 'false'
params[:checked] == 'true'
c
n
issue
params
n
exit
n
exit
exception
n
c
n
params[:checked] == 'true' ? true : false
